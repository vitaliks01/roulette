import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { RouletteCell, RouletteState, RouletteResult } from '../types/roulette';

// Generate cells: alternating red and black with values from 1-14
const generateCells = (): RouletteCell[] => {
  const cells: RouletteCell[] = [];
  
  for (let i = 1; i <= 14; i++) {
    cells.push({
      id: i,
      value: i,
      color: i % 2 === 0 ? 'red' : 'black'
    });
  }
  
  return cells;
};

type GamePhase = 'countdown' | 'spinning' | 'showing_result' | 'preparing_next';

export const useRoulette = () => {
  // –ú–µ–º–æ—ñ–∑—É—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
  const cells = useMemo(() => generateCells(), []);
  
  const [gamePhase, setGamePhase] = useState<GamePhase>('countdown');
  const [state, setState] = useState<RouletteState>({
    isSpinning: false,
    countdown: 60,
    currentResult: null,
    history: [],
    nextAutoSpin: Date.now() + 60000
  });

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ref –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤
  const timersRef = useRef<{
    countdownTimer?: NodeJS.Timeout;
    resultTimer?: NodeJS.Timeout;
    prepareTimer?: NodeJS.Timeout;
  }>({});

  // –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–π–º–µ—Ä—ñ–≤
  const clearAllTimers = useCallback(() => {
    Object.values(timersRef.current).forEach(timer => {
      if (timer) clearTimeout(timer);
    });
    timersRef.current = {};
  }, []);

  // Function to handle spin completion - –æ—Ç—Ä–∏–º—É—î —Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ –∫–æ–ª–µ—Å–∞
  const handleSpinComplete = useCallback((cell: RouletteCell) => {
    console.log('üéØ Spin completed, final result determined by wheel position:', cell.value, cell.color);
    
    const result: RouletteResult = {
      cell,
      timestamp: Date.now()
    };
    
    setState(prev => ({
      ...prev,
      isSpinning: false,
      currentResult: result,
      history: [result, ...prev.history].slice(0, 10),
    }));

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ–∞–∑–∏ –ø–æ–∫–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    setGamePhase('showing_result');
    console.log('üìä Showing result for 3 seconds...');

    // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É
    timersRef.current.resultTimer = setTimeout(() => {
      console.log('‚è∞ Result shown, preparing next cycle...');
      setGamePhase('preparing_next');
      
      setState(prev => ({
        ...prev,
        currentResult: null,
      }));

      // –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º —Ü–∏–∫–ª–æ–º
      timersRef.current.prepareTimer = setTimeout(() => {
        console.log('üîÑ Starting new countdown cycle');
        setGamePhase('countdown');
        
        setState(prev => ({
          ...prev,
          countdown: 60,
          nextAutoSpin: Date.now() + 60000
        }));
      }, 1000);
    }, 3000);
  }, []);

  // Function to start a spin - –Ω–µ –≤–∏–∑–Ω–∞—á–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
  const spin = useCallback(() => {
    console.log('üé∞ Starting spin without predetermined result...');
    
    setGamePhase('spinning');
    setState(prev => ({
      ...prev,
      isSpinning: true,
    }));
  }, []);

  // Main timer logic - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π useEffect
  useEffect(() => {
    if (gamePhase !== 'countdown') return;

    console.log('‚è∞ Starting countdown timer...');
    
    timersRef.current.countdownTimer = setInterval(() => {
      setState(prev => {
        const now = Date.now();
        const timeLeft = Math.max(0, Math.floor((prev.nextAutoSpin - now) / 1000));

        // –Ø–∫—â–æ —á–∞—Å –≤–∏–π—à–æ–≤ - –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ä—É–ª–µ—Ç–∫—É
        if (timeLeft === 0) {
          console.log('‚è∞ Countdown finished, triggering spin...');
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setTimeout –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —Å—Ç–µ–π—Ç—É
          setTimeout(() => spin(), 100);
          return prev; // –ù–µ –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–µ–π—Ç —Ç—É—Ç
        }

        return {
          ...prev,
          countdown: timeLeft
        };
      });
    }, 1000);

    // Cleanup function
    return () => {
      if (timersRef.current.countdownTimer) {
        clearInterval(timersRef.current.countdownTimer);
        timersRef.current.countdownTimer = undefined;
      }
    };
  }, [gamePhase, spin]);

  // Cleanup effect –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      clearAllTimers();
    };
  }, [clearAllTimers]);

  return {
    cells,
    state,
    gamePhase,
    spin,
    handleSpinComplete
  };
};