import React, { useRef, useMemo, useCallback } from 'react';
import { motion } from 'framer-motion';
import { RouletteCell } from '../../types/roulette';

interface RouletteWheelProps {
  cells: RouletteCell[];
  spinning: boolean;
  onSpinComplete: (cell: RouletteCell) => void;
}

const RouletteWheel: React.FC<RouletteWheelProps> = ({
  cells,
  spinning,
  onSpinComplete,
}) => {
  const wheelRef = useRef<HTMLDivElement>(null);
  const cellWidth = 80;
  const spinDataRef = useRef<{ finalPosition: number; duration: number } | null>(null);
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
  const calculateRandomSpin = useCallback(() => {
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–µ—Ä—Ç—ñ–≤ (5-8 –ø–æ–≤–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤)
    const minRotations = 5;
    const maxRotations = 8;
    const rotations = minRotations + Math.random() * (maxRotations - minRotations);
    
    // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª—É –∫–æ–º—ñ—Ä–æ–∫
    const randomCellOffset = Math.random() * cells.length;
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º—ñ—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const totalCells = rotations * cells.length + randomCellOffset;
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    // –í–∞–∂–ª–∏–≤–æ: –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –ø–æ–ª–æ–≤–∏–Ω—É —à–∏—Ä–∏–Ω–∏ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
    const centerOffset = (window.innerWidth / 2) - (cellWidth / 2);
    const finalPosition = -(totalCells * cellWidth) + centerOffset;
    
    // –í–∞—Ä—ñ–∞—Ç–∏–≤–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (7-9 —Å–µ–∫—É–Ω–¥)
    const duration = 7 + Math.random() * 2;
    
    console.log('üé≤ Generated random spin:', {
      rotations: rotations.toFixed(2),
      randomOffset: randomCellOffset.toFixed(2),
      finalPosition,
      duration: duration.toFixed(2)
    });
    
    return { finalPosition, duration };
  }, [cells.length, cellWidth]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –ø—ñ–¥ –º–∞—Ä–∫–µ—Ä–æ–º –ø—ñ—Å–ª—è –∑—É–ø–∏–Ω–∫–∏
  const determineFinalCell = useCallback((finalPosition: number): RouletteCell => {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∂–æ–≤—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ (—Ü–µ–Ω—Ç—Ä –µ–∫—Ä–∞–Ω—É)
    const markerPosition = window.innerWidth / 2;
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä—à–æ—ó –∫–æ–º—ñ—Ä–∫–∏ –ø—ñ—Å–ª—è –∑—É–ø–∏–Ω–∫–∏
    const firstCellLeft = finalPosition;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ, –≤ —è–∫—ñ–π –∫–æ–º—ñ—Ä—Ü—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –º–∞—Ä–∫–µ—Ä
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Math.floor –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –∑—Å—É–≤—É
    const cellsFromStart = Math.floor((markerPosition - firstCellLeft) / cellWidth);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –∫–æ–º—ñ—Ä–∫–∏ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –º–∞—Å–∏–≤—ñ
    const cellIndex = cellsFromStart % cells.length;
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏
    const finalCellIndex = cellIndex < 0 ? cells.length + cellIndex : cellIndex;
    
    const finalCell = cells[finalCellIndex];
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
    const cellLeftPosition = firstCellLeft + (cellsFromStart * cellWidth);
    const cellRightPosition = cellLeftPosition + cellWidth;
    const isMarkerInCell = markerPosition >= cellLeftPosition && markerPosition < cellRightPosition;
    
    console.log('üéØ Final cell determination:', {
      markerPosition,
      firstCellLeft: firstCellLeft.toFixed(2),
      cellsFromStart,
      cellIndex,
      finalCellIndex,
      finalCell: `${finalCell.value} (${finalCell.color})`,
      cellLeftPosition: cellLeftPosition.toFixed(2),
      cellRightPosition: cellRightPosition.toFixed(2),
      isMarkerInCell,
      calculationMethod: 'Math.floor for precise positioning'
    });
    
    return finalCell;
  }, [cells, cellWidth]);

  // –ö–æ–ª–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Å–ø—ñ–Ω, –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
  if (spinning && !spinDataRef.current) {
    spinDataRef.current = calculateRandomSpin();
  }
  
  // –ö–æ–ª–∏ —Å–ø—ñ–Ω –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è, –æ—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
  if (!spinning && spinDataRef.current) {
    spinDataRef.current = null;
  }
  
  const handleSpinComplete = () => {
    if (!spinning || !spinDataRef.current) return;
    
    const { finalPosition } = spinDataRef.current;
    
    console.log('üõë Wheel animation completed, determining final cell...');
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –∫–æ–º—ñ—Ä–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –∑—É–ø–∏–Ω–∫–∏
    const finalCell = determineFinalCell(finalPosition);
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É –ø–æ–≤–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏
    setTimeout(() => {
      console.log('‚úÖ Final result confirmed:', finalCell.value, finalCell.color);
      onSpinComplete(finalCell);
    }, 200);
  };

  // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ–π–Ω–∞ –∫—Ä–∏–≤–∞ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
  const animationEasing = [0.25, 0.1, 0.25, 1]; // –ü–ª–∞–≤–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–Ω—è

  // –ú–µ–º–æ—ñ–∑—É—î–º–æ —Ä–µ–Ω–¥–µ—Ä –∫–æ–º—ñ—Ä–æ–∫ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
  const renderedCells = useMemo(() => {
    return Array.from({ length: 15 }, (_, setIndex) => 
      cells.map((cell) => (
        <div 
          key={`${setIndex}-${cell.id}`}
          className={`
            flex-shrink-0 h-full flex items-center justify-center text-lg font-bold border-r border-gray-700
            ${cell.color === 'red' ? 'bg-red-600 text-white' : 'bg-gray-800 text-white'}
            transition-all duration-200 hover:brightness-110
          `}
          style={{ width: `${cellWidth}px` }}
        >
          <span className="select-none">{cell.value}</span>
        </div>
      ))
    );
  }, [cells, cellWidth]);

  return (
    <div className="relative w-full overflow-hidden h-20 mx-auto bg-gray-900 rounded-lg border border-gray-700">
      {/* –¢–æ—á–Ω–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –º–∞—Ä–∫–µ—Ä */}
      <div className="absolute left-1/2 transform -translate-x-1/2 top-0 h-full w-1 bg-yellow-400 z-20 shadow-lg"></div>
      <div className="absolute left-1/2 transform -translate-x-1/2 -top-3 w-0 h-0 border-l-6 border-r-6 border-b-12 border-transparent border-b-yellow-400 z-20 drop-shadow-lg"></div>
      
      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–µ—Ä—Ç–∞–Ω–Ω—è */}
      {spinning && (
        <div className="absolute top-2 right-2 text-yellow-400 text-sm font-medium animate-pulse z-20">
          Spinning...
        </div>
      )}
      
      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø—ñ–Ω –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è */}
      {spinning && spinDataRef.current && (
        <div className="absolute top-2 left-2 text-blue-400 text-xs font-medium z-20">
          Duration: {spinDataRef.current.duration.toFixed(1)}s
        </div>
      )}
      
      {/* –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è */}
      <div className="absolute bottom-1 left-1/2 transform -translate-x-1/2 text-yellow-300 text-xs z-20">
        Marker: {(window.innerWidth / 2).toFixed(0)}px
      </div>
      
      <motion.div
        ref={wheelRef}
        className="flex absolute left-0 top-0 h-full"
        animate={{
          x: spinning && spinDataRef.current ? spinDataRef.current.finalPosition : 0
        }}
        initial={{ x: 0 }}
        transition={{
          duration: spinning && spinDataRef.current ? spinDataRef.current.duration : 0,
          ease: animationEasing,
        }}
        onAnimationComplete={handleSpinComplete}
      >
        {renderedCells}
      </motion.div>
    </div>
  );
};

export default RouletteWheel;